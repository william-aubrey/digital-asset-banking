# ... existing code ...

def upload_asset(snowflake_connection: Any, file_obj: Any, file_name: str, metadata: Dict[str, Any], asset_type: str = 'generic', uploader_id: str = 'default_uploader') -> Dict[str, Any]:
    # ... existing code ...

    # Use a safe, unique S3 key: folder by asset_type, UUID prefix, basename of file
    key_name = os.path.basename(file_name)
    s3_key = f"{asset_type}/{uuid4().hex}_{key_name}"

    asset_record = {
        'file_path': key_name,  # Use sanitized name for metadata purposes
        'metadata': metadata.copy(),
        'type': asset_type
    }

    try:
        logging.info(f"Attempting to upload file '{key_name}' to s3://{S3_BUCKET}/{s3_key}")
        # ... existing code ...
    except (NoCredentialsError, ClientError) as e:
        # ... existing code ...

    # ... existing code ...

    with snowflake_connection.cursor() as cur:
        try:
            # ... existing code ...
            cur.execute("COMMIT;")
            logging.info(f"Successfully inserted asset '{asset_name}' and committed to Snowflake.")
        except Exception:
            logging.error(f"An error occurred during Snowflake metadata insertion for asset {key_name}. Rolling back.", exc_info=True)
            cur.execute("ROLLBACK;")
            # Attempt S3 cleanup to avoid orphaned uploads
            try:
                s3_client.delete_object(Bucket=S3_BUCKET, Key=s3_key)
                logging.info(f"Rolled back S3 object s3://{S3_BUCKET}/{s3_key}")
            except Exception:
                logging.error(f"Failed to delete S3 object after DB rollback: {s3_key}", exc_info=True)
            raise  # Re-raise the exception to notify the user and potentially trigger cleanup

    return asset_record

# ... existing code ...

if choice == "Asset Marketplace (Snowflake)":
    # ... existing code ...
    try:
        table_name = "DIM_ASSETS"
        db_name = st.secrets.connections.snowflake.database
        schema_name = st.secrets.connections.snowflake.schema
        fully_qualified_table_name = f'"{db_name}"."{schema_name}"."{table_name}"'

        query = f"SELECT * FROM {fully_qualified_table_name} ORDER BY ASSET_SK DESC LIMIT 100;"
        if DEBUG:
            st.code(query, language='sql')
        # ... rest of block ...