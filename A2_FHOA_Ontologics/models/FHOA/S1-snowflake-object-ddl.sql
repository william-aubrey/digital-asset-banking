-- use sysadmin to create the database and schema
USE ROLE SYSADMIN;

-- Create Database and Schema for the FHOA Ontology
-- Create Database and Schema for the Ontologics Framework
CREATE DATABASE IF NOT EXISTS ONTOLOGICS;
CREATE SCHEMA IF NOT EXISTS ONTOLOGICS.IDEF0;

USE DATABASE ONTOLOGICS;
USE SCHEMA IDEF0;

-- Table for high-level model definitions
CREATE OR REPLACE TABLE MODELS (
    MODEL_ID NUMBER(38,0) PRIMARY KEY, -- Note: ID is managed by the application layer, not auto-incremented.
    MODEL_NAME VARCHAR(255) NOT NULL,
    NODE VARCHAR(10)
);

-- Table for FUNCTIONS (the boxes)
CREATE OR REPLACE TABLE FUNCTIONS (
    FUNCTION_ID NUMBER(38,0) PRIMARY KEY, -- Note: ID is managed by the application layer. This allows for pre-linking parent/child relationships before ingestion.
    MODEL_ID NUMBER(38,0) NOT NULL,
    NODE VARCHAR(10),
    FUNCTION_NAME VARCHAR(255) NOT NULL,
    PARENT_FUNCTION_ID NUMBER(38,0),
    CONSTRAINT FK_FUNCTION_MODEL FOREIGN KEY (MODEL_ID) REFERENCES MODELS(MODEL_ID),
    CONSTRAINT FK_PARENT_FUNCTION FOREIGN KEY (PARENT_FUNCTION_ID) REFERENCES FUNCTIONS(FUNCTION_ID)
);

-- Table for ENTITIES (the conceptual "things" or arrows)
CREATE OR REPLACE TABLE ENTITIES (
    ENTITY_ID NUMBER(38,0) PRIMARY KEY, -- Note: ID is managed by the application layer.
    EDGE VARCHAR(255),
    ENTITY_NAME VARCHAR(255) NOT NULL,
    DESCRIPTION VARCHAR(1000)
);

-- The core junction table for all connections
CREATE OR REPLACE TABLE FUNCTION_ENTITIES (
    FUNCTION_ENTITY_ID NUMBER(38,0) PRIMARY KEY, -- Note: ID is managed by the application layer. This facilitates the creation of ICOM bundles.
    FUNCTION_ID NUMBER(38,0) NOT NULL,
    ENTITY_ID NUMBER(38,0) NOT NULL,
    ROLE VARCHAR(50) NOT NULL COMMENT 'INPUT, CONTROL, OUTPUT, or MECHANISM',
    EDGE VARCHAR(255), --bundle name for grouping arrows
    -- Link to the parent FUNCTION_ENTITIES record for bundling
    PARENT_FUNCTION_ENTITY_ID NUMBER(38,0),

    -- Source Traceability Columns for external/cross-model arrows
    SOURCE_MODEL_ID NUMBER(38,0),
    SOURCE_FUNCTION_ID NUMBER(38,0),
    SOURCE_ENTITY_ID NUMBER(38,0),

    -- Visual Metadata Columns
    TUNNEL_STATUS VARCHAR(50) DEFAULT 'NONE' COMMENT 'e.g., NONE, TUNNELED_AT_SOURCE, TUNNELED_AT_DESTINATION',

    -- Foreign Key Constraints
    CONSTRAINT FK_FE_FUNCTION FOREIGN KEY (FUNCTION_ID) REFERENCES FUNCTIONS(FUNCTION_ID),
    CONSTRAINT FK_FE_ENTITY FOREIGN KEY (ENTITY_ID) REFERENCES ENTITIES(ENTITY_ID),
    CONSTRAINT FK_FE_PARENT_FE FOREIGN KEY (PARENT_FUNCTION_ENTITY_ID) REFERENCES FUNCTION_ENTITIES(FUNCTION_ENTITY_ID),
    CONSTRAINT FK_SOURCE_MODEL FOREIGN KEY (SOURCE_MODEL_ID) REFERENCES MODELS(MODEL_ID),
    CONSTRAINT FK_SOURCE_FUNCTION FOREIGN KEY (SOURCE_FUNCTION_ID) REFERENCES FUNCTIONS(FUNCTION_ID),
    CONSTRAINT FK_SOURCE_ENTITY FOREIGN KEY (SOURCE_ENTITY_ID) REFERENCES ENTITIES(ENTITY_ID)
);

/*
2025-08-13-1808 Added as suggestions from GPT5
*/
-- Outputs connected to consumers by shared ENTITY_ID
CREATE OR REPLACE VIEW CONNECTORS_V AS
SELECT
  f_out.MODEL_ID,
  f_out.FUNCTION_ID AS A_FUNCTION_ID,
  'RIGHT' AS A_SIDE,
  'O' AS A_ROLE,
  f_in.FUNCTION_ID  AS B_FUNCTION_ID,
  CASE fe_in.ROLE WHEN 'INPUT' THEN 'LEFT'
                  WHEN 'CONTROL' THEN 'TOP'
                  WHEN 'MECHANISM' THEN 'BOTTOM' END AS B_SIDE,
  SUBSTR(e.ENTITY_NAME,1,255) AS LABEL
FROM FUNCTIONS f_out
JOIN FUNCTION_ENTITIES fe_out ON fe_out.FUNCTION_ID = f_out.FUNCTION_ID AND fe_out.ROLE = 'OUTPUT'
JOIN FUNCTION_ENTITIES fe_in  ON fe_in.ENTITY_ID    = fe_out.ENTITY_ID  AND fe_in.ROLE IN ('INPUT','CONTROL','MECHANISM')
JOIN FUNCTIONS f_in           ON f_in.FUNCTION_ID   = fe_in.FUNCTION_ID AND f_in.MODEL_ID = f_out.MODEL_ID
JOIN ENTITIES e               ON e.ENTITY_ID        = fe_out.ENTITY_ID;

-- Boundary-like stubs (only output or only consumer)
CREATE OR REPLACE VIEW STUBS_V AS
WITH FE AS (
  SELECT f.MODEL_ID, f.FUNCTION_ID, fe.ROLE, fe.ENTITY_ID, e.ENTITY_NAME
  FROM FUNCTIONS f
  JOIN FUNCTION_ENTITIES fe ON fe.FUNCTION_ID = f.FUNCTION_ID
  JOIN ENTITIES e ON e.ENTITY_ID = fe.ENTITY_ID
),
AGG AS (
  SELECT MODEL_ID, ENTITY_ID,
         MAX(CASE WHEN ROLE='OUTPUT' THEN 1 ELSE 0 END) AS HAS_O,
         MAX(CASE WHEN ROLE IN ('INPUT','CONTROL','MECHANISM') THEN 1 ELSE 0 END) AS HAS_ICM
  FROM FE GROUP BY MODEL_ID, ENTITY_ID
)
SELECT
  FE.MODEL_ID,
  FE.FUNCTION_ID,
  CASE FE.ROLE WHEN 'OUTPUT' THEN 'RIGHT'
               WHEN 'INPUT' THEN 'LEFT'
               WHEN 'CONTROL' THEN 'TOP'
               WHEN 'MECHANISM' THEN 'BOTTOM' END AS SIDE,
  SUBSTR(FE.ROLE,1,1) AS ROLE,
  CASE FE.ROLE WHEN 'OUTPUT' THEN 'x' WHEN 'INPUT' THEN 'x' WHEN 'CONTROL' THEN 'y' WHEN 'MECHANISM' THEN 'y' END AS AXIS,
  CASE FE.ROLE WHEN 'OUTPUT' THEN 1 WHEN 'INPUT' THEN -1 WHEN 'CONTROL' THEN -1 WHEN 'MECHANISM' THEN 1 END AS DIR,
  SUBSTR(FE.ENTITY_NAME,1,255) AS LABEL
FROM FE
JOIN AGG USING (MODEL_ID, ENTITY_ID)
WHERE (HAS_O = 1 AND HAS_ICM = 0) OR (HAS_O = 0 AND HAS_ICM = 1);

CREATE OR REPLACE TABLE IF NOT EXISTS FUNCTION_GEOMETRY (
  MODEL_ID      NUMBER(38,0) NOT NULL,
  FUNCTION_ID   NUMBER(38,0) NOT NULL,
  X             NUMBER(10,0) DEFAULT 200,
  Y             NUMBER(10,0) DEFAULT 180,
  W             NUMBER(10,0) DEFAULT 220,
  H             NUMBER(10,0) DEFAULT 120,
  PRIMARY KEY (MODEL_ID, FUNCTION_ID)
);
